/FarmManagementApp
├── backend/                      # Backend kısmı, iş mantığı ve veri işlemleri burada yer alacak
│   ├── models/                   # Veritabanı modelleri, veri sınıfları
│   │   ├── animal.py             # Animal abstract class, koyun ve inek sınıfları burada
│   │   ├── cow.py                # Cow sınıfı (inek)
│   │   ├── sheep.py              # Sheep sınıfı (koyun)
│   │   ├── vaccine.py            # Vaccine ve bakım ile ilgili sınıflar
│   │   └── user.py               # Kullanıcı sınıfı ve yetki sistemleri
│   ├── services/                 # İş mantığı ve servisler
│   │   ├── animal_service.py     # Hayvanlarla ilgili iş mantığı
│   │   ├── notification_service.py # Bildirim sistemi ve raporlamalar
│   │   ├── vaccine_service.py    # Aşı ve bakım ile ilgili servisler
│   │   ├── user_service.py       # Kullanıcı yönetimi ve yetkilendirme servisleri
│   │   ├── auth_service.py       # Kimlik doğrulama ve oturum işlemleri (Login, Logout)
│   │   └── database_service.py   # Veritabanı bağlantı ve işlemleri (CRUD operasyonları)
│   ├── utils/                    # Yardımcı fonksiyonlar ve ortak kullanılacak araçlar
│   │   ├── validators.py         # Doğrulama (validation) ve filtre işlemleri
│   │   ├── password_helper.py    # Şifre doğrulama, hashleme işlemleri
│   │   └── helpers.py            # Diğer yardımcı fonksiyonlar
│   ├── config/                   # Konfigürasyon ayarları (veritabanı, bildirimler vs.)
│   │   └── config.py             # Genel ayarlar ve bağlantı bilgileri
│   ├── middleware/               # Kimlik doğrulama ve oturum kontrolü (JWT, Token bazlı işlemler)
│   │   └── auth_middleware.py    # Kullanıcı oturumu ve yetki kontrolü için middleware
│   └── migrations/               # Veritabanı şeması değişiklikleri
│       └── versions/             # Migration versiyon dosyaları
│
├── frontend/                     # Arayüz ile ilgili dosyalar
│   ├── main_window.py            # Ana arayüz dosyası (tkinter arayüzü)
│   ├── animal_view.py            # Hayvanlarla ilgili görüntüleme ekranı (detaylar, arama)
│   ├── report_view.py            # Günlük raporları gösteren ekran
│   ├── notification_view.py      # Bildirimler ve yapılması gereken işlemler için arayüz
│   ├── tree_view.py              # Soyağacı görüntüleme ekranı
│   └── user_login_view.py        # Kullanıcı giriş ekranı (kimlik doğrulama)
│
├── database/                     # Veritabanı dosyaları ve yönetimi
│   ├── migrations/               # Eğer veritabanında değişiklik olursa, versiyon takip sistemi
│   └── vetlog.db        # SQLite veritabanı dosyası
│
├── tests/                        # Birim ve entegrasyon testleri
│   ├── test_animal_service.py    # Hayvan servisi için testler
│   ├── test_notification.py      # Bildirim sistemi testleri
│   ├── test_database.py          # Veritabanı ile ilgili testler
│   ├── test_vaccine_service.py   # Aşı ve bakım servisi testleri
│   ├── test_user_service.py      # Kullanıcı yönetimi ve yetki sistemi testleri
│   └── test_auth_service.py      # Kimlik doğrulama ve oturum yönetimi testleri
│
├── requirements.txt              # Projede kullanılan kütüphaneler ve bağımlılıklar
└── README.md                     # Proje hakkında genel bilgi ve kullanım talimatları

---

# VETLOG Proje Dosya Yapısı Açıklaması
# FarmManagementApp

Bu dizin, çiftlik yönetim uygulamasının ana yapısını içerir. Backend, frontend ve veritabanı ile ilgili tüm kaynaklar burada yer alır.

## 1. backend/
Backend kısmı, iş mantığının ve veri işlemlerinin yürütüldüğü yerdir. Burada hayvanlarla ilgili işlemler, aşı takibi, bildirim sistemi ve veritabanı işlemleri yer alır.

### models/
Veritabanı modellerini ve veri sınıflarını içerir.

- **animal.py**: `Animal` adında bir abstract class içerir. İnek (Cow) ve koyun (Sheep) gibi hayvan sınıflarının türetildiği ana sınıftır.
- **cow.py**: İneklerle ilgili özel işlemleri ve özellikleri içeren sınıf.
- **sheep.py**: Koyunlarla ilgili spesifik işlemler ve özelliklerin bulunduğu sınıf.
- **vaccine.py**: Hayvanların aşı bilgileri ve bakım takibini içeren sınıf. Her hayvanın aşı ve bakım gereksinimlerinin yönetildiği veri modeli.
- **user.py**: Kullanıcı sınıfı ve yetkilendirme sistemlerini içerir. Kullanıcıların rollerini ve yetkilerini tanımlar.

### services/
İş mantığı ve servislerin bulunduğu klasördür. Backend işlemlerinin yönetildiği servis sınıfları burada yer alır.

- **animal_service.py**: Hayvanlarla ilgili işlemleri yönetir. Hayvanların eklenmesi, güncellenmesi ve silinmesi gibi CRUD işlemleri burada tanımlıdır.
- **notification_service.py**: Aşı ve bakım zamanı gelen hayvanlar için bildirim sistemini yönetir.
- **vaccine_service.py**: Aşı ve bakım ile ilgili iş mantığı burada yürütülür. Aşıların zamanında yapılmasını sağlayan fonksiyonlar içerir.
- **user_service.py**: Kullanıcı yönetimi ve yetkilendirme işlemleri burada yapılır. Kullanıcıların yetkileri ve kimlik doğrulama işlemleri buradan yönetilir.
- **auth_service.py**: Kimlik doğrulama ve oturum yönetimi işlemlerini içerir. Kullanıcıların giriş ve çıkış işlemleri bu dosyada yapılır.
- **database_service.py**: Veritabanı işlemleri (CRUD) burada yürütülür. Veritabanına bağlanma, veri çekme ve güncelleme işlemleri bu dosyada yapılır.

### utils/
Yardımcı fonksiyonlar ve araçlar bu klasörde bulunur.

- **validators.py**: Verilerin doğruluğunu kontrol eden yardımcı fonksiyonları içerir.
- **password_helper.py**: Şifrelerin doğrulanması ve hashlenmesi işlemlerini içeren yardımcı fonksiyonlar.
- **helpers.py**: Genel yardımcı fonksiyonlar. Projede sık kullanılan fonksiyonlar bu dosyada tutulur.

### config/
Uygulama ayarları ve konfigürasyon dosyalarının bulunduğu klasör.

- **config.py**: Veritabanı bağlantı bilgileri, bildirim ayarları ve genel uygulama ayarlarının tanımlandığı dosya.

### middleware/
Kimlik doğrulama ve oturum kontrol işlemleri burada yürütülür.

- **auth_middleware.py**: Kullanıcı oturumu ve yetki kontrolü için middleware fonksiyonları içerir. JWT token bazlı işlemler buradan yönetilir.

### migrations/
Veritabanı şema değişikliklerini yönetmek için kullanılan migration dosyaları.

- **versions/**: Migrationların versiyon takibi ve veritabanı şema değişiklikleri bu dizinde tutulur.

---

## 2. frontend/
Frontend kısmı, kullanıcı arayüzü dosyalarının bulunduğu yerdir. Bu uygulamada Tkinter gibi GUI kütüphaneleri kullanılarak masaüstü arayüzü geliştirilmiştir.

- **main_window.py**: Uygulamanın ana penceresi. Tkinter kullanılarak ana ekranın ve temel arayüz bileşenlerinin oluşturulduğu dosya.
- **animal_view.py**: Hayvanlarla ilgili bilgilerin listelendiği ve detaylarının gösterildiği arayüz. Kullanıcı hayvanların bilgilerini bu ekrandan yönetebilir.
- **report_view.py**: Günlük raporların gösterildiği ekran. Hayvanların sağlık durumu ve aşı takvimi gibi bilgilerin raporlandığı ekran.
- **notification_view.py**: Bildirimlerin listelendiği ekran. Aşılar ve bakımlarla ilgili hatırlatmalar bu ekrandan takip edilir.
- **tree_view.py**: Hayvanların soyağacının gösterildiği ekran. Hayvanların nesiller arası bağlantıları bu ekranda görsel olarak sunulur.
- **user_login_view.py**: Kullanıcı giriş ekranı. Kullanıcıların kimlik doğrulama işlemlerini gerçekleştirdiği ekran.

---

## 3. database/
Veritabanı dosyaları ve yönetim klasörüdür. Hayvanlar, kullanıcılar ve diğer bilgilerin depolandığı SQLite veritabanı dosyası burada yer alır.

- **migrations/**: Veritabanı şeması üzerinde yapılan değişikliklerin izlenmesi ve yönetilmesi için kullanılan migration dosyaları.
- **farm_management.db**: Uygulamanın SQLite veritabanı dosyası. Hayvanların bilgileri, aşı takvimi ve kullanıcı verileri burada saklanır.

---

## 4. tests/
Projedeki birim ve entegrasyon test dosyalarının bulunduğu klasördür. Her bir modülün ve fonksiyonun doğru çalıştığından emin olmak için test senaryoları burada yer alır.

- **test_animal_service.py**: Hayvan servisi için birim testler içerir. Hayvan ekleme, güncelleme ve silme işlemlerinin doğru çalıştığı bu dosyada test edilir.
- **test_notification.py**: Bildirim sistemi için yazılmış testler içerir. Aşı hatırlatmalarının ve bildirimlerin zamanında ve doğru gösterildiği test edilir.
- **test_database.py**: Veritabanı ile ilgili testleri içerir. Veritabanı işlemlerinin doğru bir şekilde çalıştığını doğrulayan testler burada bulunur.
- **test_vaccine_service.py**: Aşı ve bakım servisi için birim testler içerir. Hayvanların aşı ve bakım işlemlerinin doğru yapıldığını doğrulayan test senaryoları.
- **test_user_service.py**: Kullanıcı servisi için testler içerir. Kullanıcı yönetimi ve yetkilendirme işlemlerinin test edildiği dosya.
- **test_auth_service.py**: Kimlik doğrulama ve oturum yönetimi için test senaryoları içerir. Giriş ve çıkış işlemlerinin doğru çalıştığı testler burada yer alır.

---

## 5. requirements.txt
Uygulamanın çalışması için gerekli olan Python kütüphanelerinin listesi bu dosyada bulunur. Uygulamanın bağımlılıkları buradan yönetilir ve gerekli kütüphaneler bu dosya ile yüklenir.

---

## 6. README.md
Proje hakkında genel bilgi ve kullanım talimatlarını içeren dosya. Projenin nasıl kurulacağı, kullanılacağı ve geliştirilmesi ile ilgili bilgiler bu dosyada yer alır.
